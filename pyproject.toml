[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-onboard"
dynamic = ["version"]
description = "AI Onboard: drop-in project coach (charter + plan + align + validate + kaizen)"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AI Onboard Team"}
]
keywords = ["ai", "onboarding", "project-management", "validation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "PyYAML>=6.0.0",  # Required for policy loading (YAML policies)
    "setuptools_scm>=9.0.0",  # Required for dynamic versioning
    # Currently uses only standard library modules
    # Add external dependencies here as needed
]

[project.scripts]
ai-onboard = "ai_onboard.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "flake8-docstrings>=1.7.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "safety>=2.0.0",
    "bandit>=1.7.0",
    "types-PyYAML>=6.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["ai_onboard*"]

[tool.setuptools_scm]
version_file = "ai_onboard/VERSION.txt"
write_to = "ai_onboard/_version.py"

[tool.black]
line-length = 88
target-version = ['py38']
extend-exclude = "ai_onboard/_version\\.py"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ci_validation: marks tests as continuous improvement validation tests",
    "performance: marks tests as performance tests",
    "end_to_end: marks tests as end-to-end tests",
    "data_integrity: marks tests as data integrity tests"
]

[tool.coverage.run]
source = ["ai_onboard"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.ai_onboard/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_onboard"]
known_third_party = ["pytest", "black", "flake8", "mypy"]
skip_glob = ["ai_onboard/_version.py"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401"
]
